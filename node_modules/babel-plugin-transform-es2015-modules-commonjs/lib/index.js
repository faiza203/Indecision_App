"use strict";

exports.__esModule = true;
exports.default = _default;

var _babelHelperModuleTransforms = require("babel-helper-module-transforms");

var _babelHelperSimpleAccess = _interopRequireDefault(require("babel-helper-simple-access"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(_ref, options) {
  var t = _ref.types,
      template = _ref.template;
  var loose = options.loose,
      allowTopLevelThis = options.allowTopLevelThis,
      strict = options.strict,
      strictMode = options.strictMode,
      noInterop = options.noInterop,
      _options$allowCommonJ = options.allowCommonJSExports,
      allowCommonJSExports = _options$allowCommonJ === void 0 ? true : _options$allowCommonJ;
  var moduleAssertion = template("\n    (function(){\n      throw new Error(\"The CommonJS 'module' variable is not available in ES6 modules.\");\n    })();\n  ");
  var exportsAssertion = template("\n    (function(){\n      throw new Error(\"The CommonJS 'exports' variable is not available in ES6 modules.\");\n    })();\n  ");

  var getAssertion = function getAssertion(localName) {
    return (localName === "module" ? moduleAssertion() : exportsAssertion()).expression;
  };

  var moduleExportsVisitor = {
    ReferencedIdentifier: function ReferencedIdentifier(path) {
      var localName = path.node.name;
      if (localName !== "module" && localName !== "exports") return;
      var localBinding = path.scope.getBinding(localName);
      var rootBinding = this.scope.getBinding(localName);

      if (rootBinding !== localBinding || path.parentPath.isObjectProperty({
        value: path.node
      }) && path.parentPath.parentPath.isObjectPattern() || path.parentPath.isAssignmentExpression({
        left: path.node
      }) || path.isAssignmentExpression({
        left: path.node
      })) {
        return;
      }

      path.replaceWith(getAssertion(localName));
    },
    AssignmentExpression: function AssignmentExpression(path) {
      var _this = this;

      var left = path.get("left");

      if (left.isIdentifier()) {
        var localName = path.node.name;
        if (localName !== "module" && localName !== "exports") return;
        var localBinding = path.scope.getBinding(localName);
        var rootBinding = this.scope.getBinding(localName);
        if (rootBinding !== localBinding) return;
        var right = path.get("right");
        right.replaceWith(t.sequenceExpression([right.node, getAssertion(localName)]));
      } else if (left.isPattern()) {
        var ids = left.getOuterBindingIdentifiers();
        var _localName = Object.keys(ids).filter(function (localName) {
          if (localName !== "module" && localName !== "exports") return false;
          return _this.scope.getBinding(localName) === path.scope.getBinding(localName);
        })[0];

        if (_localName) {
          var _right = path.get("right");

          _right.replaceWith(t.sequenceExpression([_right.node, getAssertion(_localName)]));
        }
      }
    }
  };
  return {
    visitor: {
      Program: {
        exit: function exit(path) {
          if (!(0, _babelHelperModuleTransforms.isModule)(path, true)) return;
          path.scope.rename("exports");
          path.scope.rename("module");
          path.scope.rename("require");
          path.scope.rename("__filename");
          path.scope.rename("__dirname");

          if (!allowCommonJSExports) {
            (0, _babelHelperSimpleAccess.default)(path, new Set(["module", "exports"]));
            path.traverse(moduleExportsVisitor, {
              scope: path.scope
            });
          }

          var moduleName = this.getModuleName();
          if (moduleName) moduleName = t.stringLiteral(moduleName);

          var _rewriteModuleStateme = (0, _babelHelperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path, {
            exportName: "exports",
            loose: loose,
            strict: strict,
            strictMode: strictMode,
            allowTopLevelThis: allowTopLevelThis,
            noInterop: noInterop
          }),
              meta = _rewriteModuleStateme.meta,
              headers = _rewriteModuleStateme.headers;

          for (var _iterator = meta.source, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref3 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref3 = _i.value;
            }

            var _ref4 = _ref3;
            var _source = _ref4[0];
            var _metadata = _ref4[1];
            var loadExpr = t.callExpression(t.identifier("require"), [t.stringLiteral(_source)]);
            var header = void 0;

            if ((0, _babelHelperModuleTransforms.isSideEffectImport)(_metadata)) {
              header = t.expressionStatement(loadExpr);
            } else {
              header = t.variableDeclaration("var", [t.variableDeclarator(t.identifier(_metadata.name), (0, _babelHelperModuleTransforms.wrapInterop)(path, loadExpr, _metadata.interop) || loadExpr)]);
            }

            header.loc = _metadata.loc;
            headers.push(header);
            headers.push.apply(headers, (0, _babelHelperModuleTransforms.buildNamespaceInitStatements)(meta, _metadata));
          }

          (0, _babelHelperModuleTransforms.ensureStatementsHoisted)(headers);
          path.unshiftContainer("body", headers);
        }
      }
    }
  };
}